{
	"name": "df_hospitals",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ecdc_hospital_dl",
						"type": "DatasetReference"
					},
					"name": "datahospital"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date",
						"type": "DatasetReference"
					},
					"name": "dimdate"
				},
				{
					"dataset": {
						"referenceName": "ds_looup",
						"type": "DatasetReference"
					},
					"name": "CountryData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_hospital_weekly_sink_dl",
						"type": "DatasetReference"
					},
					"name": "finalweeklysink"
				},
				{
					"dataset": {
						"referenceName": "ds_hospital_daily_sink",
						"type": "DatasetReference"
					},
					"name": "dailysink"
				}
			],
			"transformations": [
				{
					"name": "select1",
					"description": "SelectSpecific_data"
				},
				{
					"name": "Weekstartend"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "weeklypivot"
				},
				{
					"name": "dailypivot"
				},
				{
					"name": "sortweekly"
				},
				{
					"name": "sortdaily"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as integer,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> datahospital",
				"source(output(",
				"          date_key as integer,",
				"          date as date,",
				"          year as string,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimdate",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryData",
				"datahospital select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"derivedColumn1 aggregate(groupBy(ecdc_week_year),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> Weekstartend",
				"select1, CountryData lookup(select1@country == CountryData@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = select1@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> split1@(Weekly, Daily)",
				"dimdate derive(ecdc_week_year = year + '-W' + lpad(week_of_year, 2 , '0' )) ~> derivedColumn1",
				"split1@Weekly, Weekstartend join(reported_year_week == ecdc_week_year,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          week_start_date,",
				"          week_end_date,",
				"          reported_year_week),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> weeklypivot",
				"split1@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> dailypivot",
				"weeklypivot sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortweekly",
				"dailypivot sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortdaily",
				"sortweekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          population,",
				"          {new ICU admissions count} = {countWeekly new ICU admissions per 100k},",
				"          {new hospital admissions count} = {countWeekly new hospital admissions per 100k},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"sortdaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          {hospital occupancy count} = {countDaily hospital occupancy},",
				"          {ICU occupancy count} = {countDaily ICU occupancy},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> finalweeklysink",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> dailysink"
			]
		}
	}
}